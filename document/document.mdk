Title         : LL(1)语法分析程序
Author        :4班   卢昱昊   2016210537
Logo          : True
Package : [UTF8]ctex


[INCLUDE=book]
[INCLUDE=webtoc]
[INCLUDE=webanchors]

[TITLE]

~ Begin SidePanel
[TOC]
~ End SidePanel

~ Begin MainPanel

# Features
1. 采用Ｃ++开发，利用C++ stl库如vector,set,map等手动构造数据结构，并从算法层面进行一定程度的优化。代码逻辑分明，思路清晰；程序执行高效
2. 极大的人性化：
  * 用户只需要修改文法Grammer.txt(默认为原题给定文法)，即可自动构造预测分析表。文法中**随意空格**，支持小写字母数字下划线构成的**终结字符串**
  * 输入待分析串，格式化输出每一步的栈状态与输出，具有完备的纠错能力，能够最后判定分析是否成功。输入串支持空格断句，自动检测输入串是否符合规范，不符合规范则要求重新输入。
  * 对于过程中每一步，都会有准确的提示或错误信息。
3. 强大的功能
  * 适用于**所有不含有隐式左递归的上下文无关文法**[^f1]
  * 自动消除显示左递归，自动构造first集follow集
  * 利用动态规划，提高了first集follow集的计算速度
  * 分析过程具有完备的[纠错能力][#error]，保证分析的完整进行。
4. 规范的输出：
  * 输出格式优美规范。


# LL(1)语法分析策略

## LL(1)文法定义
如果一个文法的预测分析表M不含多重定义的表项，则称该文法为LL(1)文法。

## 非递归预测分析
非递归预测分析模型[如图][ycfx]
~ Figure { #ycfx; caption:"预测分析模型"; page-align:top}
![ycfx]
~ 
[ycfx]: ycfx.jpeg "ycfx"
输入缓冲区
 ~存放被分析的输入符号串，串尾符号\$是符号串结束标志
分析栈
 ~存放一系列文法符号，符号\$标识栈底。分析开始时，先将\$入栈，以标识栈底，然后再将文法的开始符号入栈
分析表
 ~这是一个二维表M[A,a],其中A是非终结符号，a是终结符号或是\$,根据给定的A和a，可在分析表M中找到相应的分析动作指示。
输出流
 ~分析过程中所采用的产生式序列。
预测分析控制程序
 ~该程序是预测分析程序的核心部分，是由分析表驱动的，它总是根据栈顶符号X和当前输入符号a来决定分析程序应采取的动作。

## 消除左递归
为了避免回溯，文法不能含有左递归。为了使形如`S->AB`（AB皆为非终结符）的文法够存在，此LL(1)文法分析器仅支持消除显式左递归。算法如下：
```
    原文法：
      
    A->Aα1|Aα2|β1|β2

    等价文法:

    A->β1A'|β2A'
    A'->α1A'|α2A'|ε
```
## First集
###定义
First（α）是α可以推导出的开头终结符号的集合，即:\
```
First(α)={a|α=*>...,a∈VT}
```
此外若α=*>ε，则ε∈First(α)。

###构造

>连续使用下面的规则，直到每个集合都不再增大为止：
>
> * 若X∈VT，则Fisrt（X）=\{X\}
> * 若X∈VN，且又产生式X->a...,其中a∈VT，则把a加入到First（X）中\
>   若有产生式X->ε,则ε也加入到First（X）中
> * 若有产生式X->Y...,且Y∈VN，则把First（Y）中的所有非ε元素加入到First（X）中。\
>   若有产生式X->Y1Y2...Yk,如果对某个i，First（Y1），First（Y2），...,First(Yi-1)都含有ε，即Y1Y2...Yi-1=*>ε，则把First（Yi）中的所有非ε元素加入到First（X）中。\
>   若所有First（Yi）均含有ε，其中i=1,2,3...,k，则把ε加入到First（X）中。

##　Follow集
###定义
  假定Ｓ是文法Ｇ的开始符号，对于文法Ｇ的所有终结符号Ａ，Follow(A)是该文法的所有句型中紧跟在Ａ之后出现的终结符号或\$组成的集合，即:\
```
Follow(A)={a|S=*>...Aa...,a∈VT}
```
特别地，若Ｓ=\*>Ａ，则规定\$∈Follow(A),\$为输入符号串的右结尾标志符。

###构造
>连续使用一下规则，直到每个集合不再增大为止:
>
> * 对文法开始符号Ｓ，置\$与Follow(S)中。
> * 若有产生式A->αBβ,则把First(β)中的所有非ε元素加入到Follow(B)中
> * 若有产生式A->αB，或有产生式A->αBβ，但是ε∈First(β)，则把Follow(A)中的所有元素加入到Follow(B)中。


## 算法4.2: 预测分析表的构造 { #algo4.2}

>```
>输入：文法G
>输出：文法G的预测分析表M
>方法：
>for(文法G的每一个产生式A->α){
>    for(每个终结符号a∈First(α)) 把A->α放入表项M[A,a]中；
>    if(ε∈First(α)){
>    for(每一个b∈Follow(A)) 把A->α放入表项M[A,b]中；
>    }
>}
>for(所有无定义的表项M[A,a]) 标上错误标志。
>``` 

## 算法4.1： 非递归预测分析方法 { #algo4.1}
>```
>输入：输入符号串w,文法G的一张预测分析表M。
>输出：若w∈L(G),则输出w的最左推导，否则报告错误。
>方法：
>首先，初始化，将\$压入栈底，将文法开始符号S压入栈顶;将w\$放入输入缓冲区中，并置向前指针ip，指向w$的第一个符号。
>然后，根据分析表M对w作自顶向下的分析，过程如下：
>do{
>    令X是栈顶文法符号，a是ip所指向的输入符号；
>    if(X是终结符号或$)
>        if(X==a){从栈顶弹出X；ip前移一个位置;};
>        else error();
>    else
>        if(M[X,a]=X->Y1Y2...Yk){
>            从栈顶弹出X;
>            依次把Yk,Yk-1,...Y2,Y1压入栈;
>            输出产生式X->Y1Y2...Yk;
>        };
>        else error();
>}while(X!=$)
>```

## LL(1)错误处理 { #error}
首先，构造synch: 对于非终结符号A，终结符号b∈Follow(A),如果表项M[A,b]为空，则填入synch。然后：

1. 如果分析栈顶符号是终结符，但与输入栈不匹配，则分析栈弹出栈顶终结符
2. 如果分析栈顶为非终结符，当前输入栈顶符号为a，预测分析控制程序在分析表中查表M[A,a]
  * 若它为空白，则输入栈弹出栈顶符号
  * 若它为synch，则分析栈弹出栈顶符号。

[^f1]:为了使形如`S->AB`（AB皆为非终结符）的文法够存在，此LL(1)文法分析器仅支持消除显式左递归

# 任务描述

## 题目要求
>题目：语法分析程序的设计与实现。\
>实验内容：编写语法分析程序，实现对算术表达式的语法分析。要求所分析算数表达式由如下的文法产生。\
>```
>E->E+T | E-T | T
>T->T*F | T/F | F
>F->(E) | num
>```
>实验要求：在对输入的算术表达式进行分析的过程中，依次输出所采用的产生式。\
>方法2：编写LL(1)语法分析程序，要求如下:\
>(1)编程实现算法4.2，为给定文法自动构造预测分析表。\
>(2)编程实现算法4.1，构造LL(1)预测分析程序。\

## 题目分析 { #tmfx }

1. **可自动性** : 作为语法分析程序，要有强大的自动构造能力，要能够：
  * 自动消除左递归(显式[^f1]）
  * 自动构造first集合及follow集
  * 自动生成预测分析表（包括synch）
  * 自动分析给定的输入串，给出分析过程
  * 自动进行错误处理

2. **可泛化性** : 作为语法分析程序，要能够应对足够复杂的情况,因此:
  * 需要在词法分析前，先进行一步语法分析。
  * 不仅能够处理给定的文法，还**能够处理所有不含有隐式左递归的上下文无关文法**

# 实现情况

## 功能实现
实现[#tmfx]提到的所有条目，增添了许多特色：

1. **能够处理所有不含隐式左递归的上下文无关文法**
2. 用户只需要将文法按行写入Grammar.txt文件，运行LL1(Linux)\LL1.exe即可自动构造预测分析表。
3. 在读入Grammar文法后，会先进行一步基本的词法分析，遵循以下策略：
 * 分析产生式左侧非终结符，自动将*第一条产生式左部的非终结符*视为文法**开始符号**
 * 产生式箭头用`->`表示
 * 遇到分界符`|`则结束本产生式，开启下一条产生式。
 * 终结符为小写字母(a-z),数字(0-9),下划线(_)所构成的**字符串**，如：`num`， `123`， `_a_b2`\
   或除此之外的非大写字母非`？`非`|` *字符*，如： `+`，`/`,`&`,`=`等。
 * 非终结符为单独的大写字母(A-Z)**字符**。
 * 空用字符`?`表示。理由：相比之下`ε`不容易输入。
 * 按行读取分析，跳过空白符号。
 * 将分析结果存入合适的数据结构。
 * 对于过程中所有的不规范格式，精准报错并退出程序。
4. 词法分析后，执行消除显示左递归，输出修改后的文法
5. 对于修改后的文法，求出各个非终结符的first集和follow集，输出。
 * **采用了动态规划的方式，减少重复计算，提高了执行效率**。
6. 根据所求出的first集follow集，利用[算法4.2][#algo4.2]构造预测分析。包括synch的填充。
7. 要求用户在命令窗口中输入待分析串，也进行**词法分析**
 * 不需要输入\$结尾，程序自动添加。
 * 遇到空格自动断句
 * 以第3条提到的终结符格式分割以获取符号。
 * 检测到大写字符则ERROR
 * 判断所获得的*非大写符号*或*符号串*是否属于非终结符集合，如果不属于则Error
 * 如果Error则要求用户重新输入
8. 根据[算法4.1][#algo4.1]对分析串进行分析，逐步输出分析过程
 * 分析前，分析栈压入`$`及文法开始符号，输入栈压入`$`
 * 每一步输出当前分析栈(左侧为栈底)，输入缓冲区(右侧为栈底)以及\
   输出(正确：产生式；错误：错误处理方式)。
 * 根据[错误处理策略][#error],处理产生的错误，保证不会卡住。
9. 分析栈输入栈一者为空则分析结束，二者均为空则分析成功，否则分析失败。


## 数据结构

符号
 ~string 字符串类型。选择理由：文法符号不止一个字符
终结符集
 ~set<string> 字符串集合。
非终结符号集(重点)
 ~map<string，item> 映射关系对类型。其中key为非终结符，value为item。item结构如下：
>```
>/*非终结符对应项目*/
>class item
>{
>      public:
>        //1.first集，字符串集合
>        set<string> first;
>
>        //2.follow集,字符串集合
>        set<string> follow;            
>
>        //3.非终结符右侧 产生式集合
>        //产生式集合中的每个产生式，类型为vector<string>,字符串向量。
>        vector<vector<string>> prods;
>
>        //4.标志first集是否准备好
>        bool rfirst;
>
>        //5.标志follow集是否准备好
>        bool rfollow;
>        
>        //构造函数，rfirst及rfollow均初始化为false
>        //作用：在求first集follow集过程中，一旦求得标志位改为true。
>        //     动态规划，在遍历过程中避免重复计算. 
>        item()
>        {
>                rfirst = false;
>                rfollow = false;
>        }
>};
>
>```

输入栈及分析栈
 ~vector<string>类型

## 全局变量及函数


**全局变量格式 <类型> <变量名>(默认值)**\
**函数格式<类型> <函数名>(参数表)**\

ifstream fin("Grammar.txt")
 ~文件输入流
map`<string,item>` Nin
 ~未消除左递归的非终结符集
map`<string,item>` Nmodified
 ~消除左递归后的非终结符集
set`<string>`T
 ~终结符结合
map`<string,map<string,vector<string>>>` FAT
 ~Forecast analysis table 预测分析表FAT，即M表
vector`<string>` inputstack
 ~输入栈
vector`<stirng>` astack
 ~分析栈
void read()
 ~读入文件函数，并进行词法分析，转化为程序内部
void outProds(`map<string,item> &`)
 ~给定非终结符集，输出产生式，将内部非终结符集数据结构，以产生式方式输出。
void outset()
 ~输出消除左递归后的非终结符的First、Follow集
void outT()
 ~输出终结符集。(调试用)
void elimimateleftrecursion()
 ~消除左递归函数(此后称“非终结符”均指“消除左递归后的非终结符集”)。新产生的非终结符为原终结符加撇`’` 如：`A'`
set`<string>` findfirst(string)
 ~寻找并返回单符号的First集
set`<string> findfirst(vector<string>::iterator, vector<string>::iterator)`
 ~findfirst的重载函数，寻找符号串(多个符号的连接，如产生式)的First集
void first()
 ~构造所有非终结符的first集，递归求得+动态规划，极大的提高了程序的执行效率。
set <string> findfollow(string)
 ~寻找并返回单符号的Follow集，递归求得+动态规划，极大的提高了程序的执行效率。
void follow()
 ~构造所有非终结符的follow集
void makeFAT()
 ~构造预测分析表
void outFAT()
 ~输出预测分析表
int getinputstack()
 ~input分析字符串。无需加`$`。格式不合法则循环重新输入，合法则继续执行
void analysis()
 ~分析输入串，并逐步输出
int main()
 ~主函数main


# 程序及执行

## 程序相关文件结构
>./\
>    |——  LL1.cpp                 : c++程序\
>    |——  LL1                     : Linux可执行文件,由ｇ++7.3.0编译\
>    |——  LL1.exe                 : Windows可执行文件，由vs2017编译\
>    |——  Grammer.txt             : 文法输入文件\

## 编译及测试环境
> (1)Ubuntu 18.04 采用g++7.3.0编译\
> (2)Win10  采用vs2017编译\

## 给定文法测试

**Grammar.txt**:
```
E->E+T|E-T|T
T->T*F|T/F|F
F->(E)|num
```
**执行效果**

```
确认语法文件Grammar.txt编辑完成，按任意键继续

词法分析成功！开始消除左递归
消除左递归后，文法如下:
E->TE'
E'->+TE'
E'->-TE'
E'->?
F->(E)
F->num
T->FT'
T'->*FT'
T'->/FT'
T'->?

求得各非终结符的First集Follow集:
-----------------------------------------------
     |               First|              Follow
-----------------------------------------------
E    | ( num              | $ )                
E'   | + - ?              | $ )                
F    | ( num              | $ ) * + - /        
T    | ( num              | $ ) + -            
T'   | * / ?              | $ ) + -            
-----------------------------------------------

Forecast analysis Table :
--------------------------------------------------------------------------------------------------------
|      | (         | )         | *         | +         | -         | /         | num       | $         |
--------------------------------------------------------------------------------------------------------
| E    | E->TE'    | synch     | ERROR     | ERROR     | ERROR     | ERROR     | E->TE'    | synch     |
| E'   | ERROR     | E'->?     | ERROR     | E'->+TE'  | E'->-TE'  | ERROR     | ERROR     | E'->?     |
| F    | F->(E)    | synch     | synch     | synch     | synch     | synch     | F->num    | synch     |
| T    | T->FT'    | synch     | ERROR     | synch     | synch     | ERROR     | T->FT'    | synch     |
| T'   | ERROR     | T'->?     | T'->*FT'  | T'->?     | T'->?     | T'->/FT'  | ERROR     | T'->?     |
--------------------------------------------------------------------------------------------------------
请输入待分析字符串

Input Buffer: (num*(num+num))/num
分析过程:
-----------------------------------------------------------
  analysis          |  input              |  output        
-----------------------------------------------------------
$E                  | (num*(num+num))/num$| E—>TE'       
$E'T                | (num*(num+num))/num$| T—>FT'       
$E'T'F              | (num*(num+num))/num$| F—>(E)       
$E'T')E(            | (num*(num+num))/num$| 
$E'T')E             |  num*(num+num))/num$| E—>TE'       
$E'T')E'T           |  num*(num+num))/num$| T—>FT'       
$E'T')E'T'F         |  num*(num+num))/num$| F—>num       
$E'T')E'T'num       |  num*(num+num))/num$| 
$E'T')E'T'          |     *(num+num))/num$| T'—>*FT'     
$E'T')E'T'F*        |     *(num+num))/num$| 
$E'T')E'T'F         |      (num+num))/num$| F—>(E)       
$E'T')E'T')E(       |      (num+num))/num$| 
$E'T')E'T')E        |       num+num))/num$| E—>TE'       
$E'T')E'T')E'T      |       num+num))/num$| T—>FT'       
$E'T')E'T')E'T'F    |       num+num))/num$| F—>num       
$E'T')E'T')E'T'num  |       num+num))/num$| 
$E'T')E'T')E'T'     |          +num))/num$| T'—>?        
$E'T')E'T')E'       |          +num))/num$| E'—>+TE'     
$E'T')E'T')E'T+     |          +num))/num$| 
$E'T')E'T')E'T      |           num))/num$| T—>FT'       
$E'T')E'T')E'T'F    |           num))/num$| F—>num       
$E'T')E'T')E'T'num  |           num))/num$| 
$E'T')E'T')E'T'     |              ))/num$| T'—>?        
$E'T')E'T')E'       |              ))/num$| E'—>?        
$E'T')E'T')         |              ))/num$| 
$E'T')E'T'          |               )/num$| T'—>?        
$E'T')E'            |               )/num$| E'—>?        
$E'T')              |               )/num$| 
$E'T'               |                /num$| T'—>/FT'     
$E'T'F/             |                /num$| 
$E'T'F              |                 num$| F—>num       
$E'T'num            |                 num$| 
$E'T'               |                    $| T'—>?        
$E'                 |                    $| E'—>?        
$                   |                    $| 
-----------------------------------------------------------
分析成功!

```
~ Figure { #Ggiven; caption:"给定文法分析效果图"; page-align:top}
![Ggiven]
~ 
[Ggiven]: Ggiven.png "Ggiven"

## 推广测试

### 给定文法的不规范输入

不规范输入1
 ~num(num+num/num)
**执行效果**

~ Figure { #Gn1; caption:"不规范输入1:"; page-align:top}
![Gn1]
~ 
[Gn1]: Gn1.png "Gn"

不规范输入2
 ~)(num*(num+num))/num
**执行效果**

~ Figure { #Gn2; caption:"不规范输入2:)(num*(num+num))/num"; page-align:top}
![Gn2]
~ 
[Gn2]: Gn2.png "G1"
 

### 文法1
**Grammar.txt**
```
E->E +T|E- T|T
T->T* F| T/F|  F|
F->(E  )|num|veg123|  ?
```
**执行效果**
~ Figure { #G1; caption:"文法1,输入为veg123+num*()"; page-align:top}
![G1]
~ 
[G1]: G1.png "G1"

### 文法2
**Grammer.txt**
```
S->pA | qB
A->cAd|a
B->dB|c
```
**执行效果**
~ Figure { #G2; caption:"文法2执行效果图，输入为pccadd"; page-align:top}
![G2]
~ 
[G2]: G2.png "G2"

## 代码 
```cpp
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <fstream>
#include <map>
#include <iomanip>
#include <algorithm>

using namespace std;

/*-------全局变量--------*/

/*文件读入流*/
ifstream fin("Grammar.txt");

/*非终结符对应项目*/
class item
{
      public:
        set<string> first;  //first set
        set<string> follow; //follow set
        /*产生式集合,每个产生式是string的集合*/
        vector<vector<string>> prods;
        bool rfirst;
        bool rfollow;
        item()
        {
                rfirst = false;
                rfollow = false;
        }
};

/*原非终结符集合*/

map<string, item> Nin;

/*修改后终结符集合*/
map<string, item> Nmodified;

/*终结符集合*/
set<string> T;

/*-------函数区----------*/

/*读入文件，整理格式存入产生式*/
/*按行读取，跳过空行，跳过空格，词法分析，拆分多句*/
void read()
{
        string input; //每行输入
        string str;   //待存符号
        int i_input;  //input下标
        char in;      //带判断字符

        int row = 0;
        while (getline(fin, input))
        {
                row++;
                if (!input.compare("")) //相等返回0
                        continue;       //遇到空行跳过

                /*---词法分析部---*/

                //1.获取产生式左部，限制必须为非终结符，即必须为大写字母。设置标记
                int state = 0; //未获取产生式左部状态
                string left;
                item right;
                vector<string> prod; //产生式

                for (i_input = 0; i_input < input.size(); i_input++)
                {
                        //        str.clear();
                        in = input[i_input];
                        str.push_back(in);
                        if (in == ' ')
                        {
                                str.pop_back();
                                if (state == 1)
                                {
                                        cout << "ERROR: "
                                             << "row <" << row << "> column <" << i_input << ">"
                                             << "\"->\" is needed." << endl
                                             << "\"" << input << "\"" << endl;
                                        exit(1);
                                }
                                if (state == 2 && str.size())
                                {
                                        T.insert(str);
                                        prod.push_back(str);
                                        str.clear();
                                }
                                continue;
                        }

                        if (state == 0)
                        {
                                //非终结符
                                if (in >= 'A' && in <= 'Z')
                                {
                                        left.push_back(in);
                                        str.clear();
                                        state = 1; //未获取
                                }
                                else
                                {
                                        cout << "ERROR: "
                                             << "row <" << row << "> column <" << i_input << ">"
                                             << "\"" << input << "\"" << endl;
                                        exit(1);
                                }
                        }
                        //读入 ->
                        else if (state == 1)
                        {
                                if (str.size() == 2 && !str.compare("->"))
                                {

                                        str.clear();
                                        state = 2;
                                }
                                else if (str.size() == 1 && !str.compare("-"))
                                {
                                        continue;
                                }
                                else
                                {
                                        cout << "ERROR: "
                                             << "row <" << row << "> column <" << i_input << ">"
                                             << "\"->\" Error!" << endl
                                             << "\"" << input << "\"" << endl;
                                        exit(1);
                                }
                        }
                        //词法分析右式
                        else if (state == 2)
                        {
                                //小写符号串，允许由a-z,0-9或下划线组成
                                if ((in >= 'a' && in <= 'z') || (in >= '0' && in <= '9') || in == '_')
                                {
                                        continue;
                                }
                                //单符号，如‘A’终结符 ，如‘*’ 非终结符，如‘|’分界符`,以及空字符表示’？‘
                                else
                                {
                                        //如果只有单字符，str长度为1
                                        //此情况针对 小写符号串
                                        if (str.size() > 1)
                                        {
                                                str.pop_back(); //弹出单符号

                                                T.insert(str);
                                                prod.push_back(str);
                                                str.clear();

                                                str.push_back(in); //收回单符号
                                        }
                                        //判断是否为‘|’
                                        if (in == '|')
                                        {
                                                //将产生式压入众产生式集合
                                                right.prods.push_back(prod);
                                                prod.clear();
                                                str.clear();
                                        }
                                        else
                                        {
                                                if (!((in >= 'A' && in <= 'Z') || in == '?'))
                                                        T.insert(str);
                                                prod.push_back(str);
                                                str.clear();
                                        }
                                }
                        }
                }

                //句尾处理
                if (state == 2)
                {
                        //如果符号串不为空，将str结尾存入产生式prod
                        if (str.size())
                        {
                                T.insert(str);
                                prod.push_back(str);
                                str.clear();
                        }

                        //如果产生式不为空，则将产生式压入产生式集合
                        if (prod.size())
                        {
                                right.prods.push_back(prod);
                                prod.clear();
                        }

                        //将左右部分压入非终结符map
                        Nin.insert(pair<string, item>(left, right));
                        left.clear();
                        right.prods.clear();
                }
                else if (state != 2)
                {
                        cout << "ILLEGAL LINE,WE JUST CAN'T MOVE ON";
                        exit(1);
                }
        }
}
//输出产生式
void outProds(map<string, item> &N)
{
        map<string, item>::iterator iter = N.begin();
        while (iter != N.end())
        {
                vector<vector<string>>::iterator it1 = iter->second.prods.begin();
                while (it1 != iter->second.prods.end())
                {
                        cout << iter->first << "->";
                        vector<string>::iterator it2 = (*it1).begin();
                        while (it2 != (*it1).end())
                        {
                                cout << *it2;
                                it2++;
                        }
                        cout << endl;
                        it1++;
                }
                iter++;
        }
}

void outset()
{
	for (int i = 0;i<47;i++){
		cout<<"-";
	}
	cout<<endl;

	cout<<setw(5)<<""<<"|"<<setw(20)<<"First"<<"|"<<setw(20)<<"Follow"<<endl;
	for (int i = 0;i<47;i++){
		cout<<"-";
	}
	cout<<endl;
	
	map<string, item>::iterator iter = Nmodified.begin();
        while (iter != Nmodified.end())
        {
		cout<<left<<setw(5)<<iter->first<<"|";
                /*输出First集*/
		string str;
                set<string>::iterator it = iter->second.first.begin();
                while (it != iter->second.first.end())
                {
			str+=" ";
                        str+=*it;
                        it++;
                }
		cout<<setw(20)<<str<<"|";
		str.clear();

                /*输出FOLLOW集*/
                it = iter->second.follow.begin();
                while (it != iter->second.follow.end())
                {
			str+=" ";
			str+=*it;
                        it++;
                }
		cout<<setw(20)<<str<<endl;
                iter++;
        }
	for (int i = 0;i<47;i++){
		cout<<"-";
	}
	cout<<endl;

}
//输出终结符
void outT()
{
        set<string>::iterator it = T.begin();
        cout << "----T----" << endl;

        while (it != T.end())
        {
                cout << *it << endl;
                it++;
        }
        cout << "---------" << endl;
}

//消除左递归
void elimimateleftrecursion()
{
        map<string, item>::iterator iter = Nin.begin();
        while (iter != Nin.end())
        {
                vector<vector<string>>::iterator it = iter->second.prods.begin();
                int needEliminate = 0;
                vector<int> recurse;

                //定义Nmodified的左右
                while (it != iter->second.prods.end())
                {
                        if (!iter->first.compare((*it)[0]))
                        {
                                needEliminate = 1;
                                recurse.push_back(1); //A->Aa
                        }
                        else
                        {
                                recurse.push_back(0); //A->b
                        }
                        it++;
                }

                /*---Nmodified---*/
                //如果需要修改
                if (needEliminate)
                {
                        string left1(iter->first);
                        string left2(iter->first);
                        left2.push_back('\'');
                        item right1, right2;

                        for (int i = 0; i < recurse.size(); i++)
                        {
                                if (recurse[i])
                                {
                                        vector<string> prod;
                                        prod.assign(iter->second.prods[i].begin() + 1, iter->second.prods[i].end());
                                        prod.push_back(left2);
                                        right2.prods.push_back(prod);
                                }
                                else
                                {

                                        vector<string> prod(iter->second.prods[i]);
                                        if (prod.size() == 1 && !prod[0].compare("?")) //如果右部产生式为空则清空?: 例如E->Ea|? => (1) E->E' (2) E'->aE'|?
                                                prod.clear();
                                        prod.push_back(left2);
                                        right1.prods.push_back(prod);
                                }
                        }
                        vector<string> prod;
                        prod.push_back("?");
                        right2.prods.push_back(prod);
                        Nmodified.insert(pair<string, item>(left1, right1));
                        Nmodified.insert(pair<string, item>(left2, right2));
                }
                else
                {
                        Nmodified.insert(*iter);
                }

                needEliminate = 0;
                recurse.clear();
                iter++;
        }
}
//重载函数:串first 的声明
set<string> findfirst(vector<string>::iterator its, vector<string>::iterator ite);

//寻找符号的first集合
set<string> findfirst(string left)
{
        //return set
        set<string> myset;

        //终结符或者空
        if (T.count(left) || !left.compare("?"))
        {
                myset.insert(left);
        }
        else
        {
                if (Nmodified[left].rfirst)
                { //快速返回first集
                        return Nmodified[left].first;
                }
                //非终结符
                item right(Nmodified[left]);
                //it1 产生式指针
                vector<vector<string>>::iterator it1 = right.prods.begin();
                while (it1 != right.prods.end())
                {
                        //调用函数：返回串的first集合
                        set<string> get = findfirst(it1->begin(), it1->end());
                        myset.insert(get.begin(), get.end());

                        it1++;
                }
        }
        return myset;
}

//返回串的first集合
set<string> findfirst(vector<string>::iterator its, vector<string>::iterator ite)
{
        vector<string>::iterator it = its;
        set<string> myset;

        while (it != ite)
        {
                set<string> get = findfirst(*it);

                //优化：上一步已经找到*it的first集合，如果*i2为非终结符,那么就清算*it的first集合，并将*it的rfirst位标志为true
                if (!T.count(*it) && (*it).compare("?"))
                {
                        Nmodified[*it].first.insert(get.begin(), get.end());
                        Nmodified[*it].rfirst = true;
                }
                myset.insert(get.begin(), get.end());

                //如果含有空（？）并且不为最后一个，那么？需要被排除，否则结束循环。
                if (!(get.count("?") && it != ite - 1))
                        break;
                myset.erase("?");
                it++;
        }

        return myset;
}

void first()
{
        map<string, item>::iterator iter = Nmodified.begin();
        while (iter != Nmodified.end())
        {
                set<string> get = findfirst(iter->first);
                iter->second.first.insert(get.begin(), get.end());
                iter->second.rfirst = true;
                iter++;
        }
}

set<string> findfollow(string n)
{
        //如果已经找到follow集合，则直接返回
        if (Nmodified[n].rfollow)
        {
                return Nmodified[n].follow;
        }
        //return set
        set<string> myset;

        map<string, item>::iterator iter = Nmodified.begin();
        while (iter != Nmodified.end())
        {
                vector<vector<string>>::iterator it1 = iter->second.prods.begin();
                while (it1 != iter->second.prods.end())
                {
                        vector<string>::iterator it2 = it1->begin();
                        bool isfind = 0;
                        while (it2 != it1->end())
                        { //it2是产生式子中的每一个符号
                                if (!isfind && !n.compare(*it2))
                                { //第一次找到非终结符号n
                                        isfind = 1;
                                        if (it2 == it1->end() - 1 && n.compare(iter->first))
                                        { //如果n是最后一个字符，且不为left
                                                set<string> get = findfollow(iter->first);
                                                myset.insert(get.begin(), get.end());
                                        }
                                }
                                //else：互斥关系：上面找到后直接跳到下一个，不判断isfind
                                else if (isfind)
                                {
                                        //取后面字符串的first集
                                        set<string> get = findfirst(it2, it1->end());
                                        myset.insert(get.begin(), get.end());
                                        //如果含空字符,则将空(?)排除后，将产生式左侧非终结符的follow集加入
                                        if (get.count("?"))
                                        {
                                                myset.erase("?");
                                                set<string> get = findfollow(iter->first);
                                                myset.insert(get.begin(), get.end());
                                        }
                                }
                                it2++;
                        }
                        it1++;
                }
                iter++;
        }
        return myset;
}
void follow()
{
        map<string, item>::iterator iter = Nmodified.begin();
        iter->second.follow.insert("$"); //第一个插$
        while (iter != Nmodified.end())
        {
                set<string> get = findfollow(iter->first);
                iter->second.follow.insert(get.begin(), get.end());
                iter->second.rfollow = true;
                iter++;
        }
}

//Forecast analysis table 预测分析表
map<string, map<string, vector<string>>> FAT;
//构造预测分析表
void makeFAT()
{
        auto iter = Nmodified.begin();
	vector<string> synch;
	synch.push_back("synch");
        while (iter != Nmodified.end())
        {
                auto it1 = iter->second.prods.begin();
                //it1代表每一个产生式
                while (it1 != iter->second.prods.end())
                {
			auto get = findfirst(it1->begin(), it1->end());
                        //get为每个产生式的first集合
                        auto it2 = get.begin();
                        bool hasempty = false;
                        while (it2 != get.end())
                        {
                                //it2非空，即终结符号时
                                if ((*it2).compare("?"))
                                {
					if(!FAT[iter->first].count(*it2)){
				      		FAT[iter->first][*it2] = *it1;
					}
					else {
						cout<<"["<<iter->first<<","<<*it2<<"]"<<"处表项冲突!"<<endl;
						exit(0);
					}
                                }
                                else
                                {
                                        hasempty = true;
                                }
                                it2++;
                        }
                        if (hasempty)
                        {
                                get = findfollow(iter->first);
                                it2 = get.begin();
                                while (it2 != get.end())
                                {	
					if(!FAT[iter->first].count(*it2)){
				  		FAT[iter->first][*it2] = *it1;
					}
					else {
						cout<<"["<<iter->first<<","<<*it2<<"]"<<"处表项冲突!"<<endl;
						exit(0);
					}
                                        it2++;
                                }
                        }
                        it1++;
                }

		auto get = findfollow(iter->first);
		auto it2 = get.begin();
		while(it2!=get.end()){
			if(!FAT[iter->first].count(*it2)){
				FAT[iter->first][*it2] = synch;
			}
			it2++;
		}
                iter++;
        }
}
void outFAT()
{

        cout << endl
             << "Forecast analysis Table :" << endl;
         for (int i = 0; i < (T.size() + 1) * 12 + 8; i++)
        {
                cout << "-";
        }
        cout << endl;    
     	vector<string> y(T.begin(), T.end());
        y.push_back("$");
        auto ity = y.begin();
        cout << "| " << setiosflags(ios::left) << setw(5) << "";
        while (ity != y.end())
        {
                cout << "| " << setw(10) << *ity;
                ity++;
        }
        cout << "|" << endl;
        for (int i = 0; i < (T.size() + 1) * 12 + 8; i++)
        {
                cout << "-";
        }
        cout << endl;
        auto itx = Nmodified.begin();
        while (itx != Nmodified.end())
        {
                cout << "| " << setw(5) << itx->first;
                ity = y.begin();
                while (ity != y.end())
                {
                        if (FAT[itx->first].count(*ity))
                        {
				string stemp;
				if(FAT[itx->first][*ity].begin()->compare("synch")){
					stemp += itx->first;
					stemp += "->";
				}
                                auto it1 = FAT[itx->first][*ity];
                                auto it2 = it1.begin();
                                while (it2 != it1.end())
                                {
                                        stemp += *it2;
                                        it2++;
                                }
                                cout << "| " << setw(10) << stemp;
                        }
                        else
                        {
                                cout << "| " << setw(10) << "ERROR";
                        }
                        ity++;
                }
                itx++;
                cout << "|" << endl;
        }

	for (int i = 0; i < (T.size() + 1) * 12 + 8; i++){
      		 cout << "-";
        }
        cout << endl;
        
}
//输入栈
vector<string> inputstack;

int getinputstack()
{
        //清空栈
        inputstack.clear(); 
	cout<<endl<<"Input Buffer: ";
        //输入字符串
        string input;
	std::getline(std::cin,input);
        //符号str
        string str;
        for (int i = 0; i < input.size(); i++)
        {
                char in = input[i];
                str.push_back(in);
		if (in >='A'&&in<='Z'){
		     cout << str << "为无效符号,请重新输入" << endl;
		     return 0;
		}
			
		
                //小写符号串，允许由a-z,0-9或下划线组成
                if ((in >= 'a' && in <= 'z') || (in >= '0' && in <= '9') || in == '_')
                {
                        continue;
                }


                //单符号，如‘*’ 非终结符，如‘|’分界符`,以及空字符表示’？‘
                else
                {
                        //如果只有单字符，str长度为1
                        //此情况针对 小写符号串
                        if (str.size() > 1)
                        {
                                str.pop_back(); //弹出单符号

                                //若str不存在则报错，return
                                if (!T.count(str))
                                {
                                        cout << str << "为无效符号,请重新输入" << endl;
                                        return 0;
                                }
                                inputstack.push_back(str);
                                str.clear();
                                str.push_back(in); //收回单符号
                        }
			//如果不为空格，则检测后入栈
			if (in !=' '){
		        	if (!T.count(str)){
                               		cout << str << "为无效符号,请重新输入" << endl;
                                	return 0;
                        	}
                       		inputstack.push_back(str);
			}
                        str.clear();
                }
        }
        if (str.size())
        {
                if (!T.count(str))
                {
                        cout << str << "为无效符号,请重新输入" << endl;
                        return 0;
                }
                inputstack.push_back(str);
                str.clear();
        }
        inputstack.push_back("$");
        //输入栈逆转

        reverse(inputstack.begin(), inputstack.end());
        return 1;
}
void analysis()
{
        vector<string> astack; //分析栈
        astack.push_back("$");
        astack.push_back(Nmodified.begin()->first);
	
	//打印表头
	
	for(int i = 0;i < 59;i++){
		cout<<"-";
	}	
	cout<<endl;
        cout << left << setw(20) <<"  analysis"<<"| ";
	cout << left << setw(20) <<" input" <<"| ";
	cout << left << setw(15) <<" output" <<endl;
	for(int i = 0;i < 59;i++){
		cout<<"-";
	}	
	cout<<endl;
        //满足分析栈或输入栈为空则结束
        while (!(astack.empty() || inputstack.empty()))
        {
                //带输出串
                string str;

                //打印分析栈
                auto it = astack.begin();
                while (it != astack.end())
                {
                        str += *it;
                        it++;
                }
                cout << left << setw(20) << str<<"| ";
                str.clear();
                //反向打印输入栈
                auto it1 = inputstack.rbegin();
                while (it1 != inputstack.rend())
                {
                        str += *it1;
                        it1++;
                }
                cout << right << setw(20) << str<<"| ";
                str.clear();

                //如果栈顶相等，此时肯定两个栈顶为两个终结符或$
                if (!(astack.end() - 1)->compare(*(inputstack.end() - 1)))
                {
                        astack.pop_back();
                        inputstack.pop_back();
                }
                //否则当左侧栈顶为非终结符,且列表中存在时
                else if (FAT.count(*astack.rbegin()) && FAT[*astack.rbegin()].count(*(inputstack.rbegin())))
                {
                        //如果为synch
                        if (!FAT[*astack.rbegin()][*inputstack.rbegin()].begin()->compare("synch"))
                        {
        			str+="Error,[";
				str+=*astack.rbegin();
				str+=",";
				str+=*inputstack.rbegin();
				str+="]=synch,弹出分析栈顶";
				str+=*astack.rbegin();
	      			cout << left << setw(15) << str;
				astack.pop_back();

                        }
                        //如果为表达式时
                        else
                        {
                                //打印输出，即分析过程
                                str += *(astack.end() - 1);
                                str += "—>";
                                it = FAT[*(astack.end() - 1)][*(inputstack.end() - 1)].begin();
                                while (it != FAT[*(astack.end() - 1)][*(inputstack.end() - 1)].end())
                                {
                                        str += *it;
                                        it++;
                                }
                                cout << left << setw(15) << str;
                                str.clear();

                                string needpop(*astack.rbegin());
                                astack.pop_back();
                                it1 = FAT[needpop][*inputstack.rbegin()].rbegin();

                                while (it1 != (FAT[needpop][*inputstack.rbegin()]).rend())
                                {
                                        if(it1->compare("?"))
                                                astack.push_back(*it1);
                                        it1++;
                                }
                        }
                }
                //如果左侧栈顶为非终结符，表中不存在，则按ERROR处理
                else if (FAT.count(*astack.rbegin()) && !FAT[*astack.rbegin()].count(*(inputstack.rbegin())))
                {
			str+="Error,[";
			str+=*astack.rbegin();
			str+=",";
			str+=*inputstack.rbegin();
			str+="]=空白，弹出输入栈顶";
			str+=*inputstack.rbegin();
                        cout << left << setw(15) << str;
			inputstack.pop_back();

                }
                //即，如果左侧栈顶为终结符或$，但是与右侧栈顶不相同,则将左侧栈顶弹出。
                else
                {
			str+="Error,分析栈顶";
			str+=*astack.rbegin();
			str+="与输入栈顶";
			str+=*inputstack.rbegin();
			str+="不匹配，故弹出分析栈顶";
                        cout << left << setw(15) << str;
			astack.pop_back();
                }
                cout<<endl;
        }

	for(int i = 0;i < 59;i++){
		cout<<"-";
	}	
	cout<<endl;
        
	if(inputstack.empty()&&astack.empty()){
		cout<<"分析成功!"<<endl;
	}
	else{
		cout<<"分析失败"<<endl;
	}

}
int main()
{
	cout<<"确认语法文件Grammar.txt编辑完成，按任意键继续"<<endl;
	getchar();
        read();
	cout<<"词法分析成功！开始消除左递归"<<endl;
        elimimateleftrecursion();
	cout<<"消除左递归后，文法如下:"<<endl;
        outProds(Nmodified);
        first();
        follow();
	cout<<endl<<"求得各非终结符的First集Follow集:"<<endl;
        outset();
        //outT();
        makeFAT();
        outFAT();
	cout<<"请输入待分析字符串"<<endl;
        while (!getinputstack());
	cout<<"分析过程:"<<endl;
        analysis();
}

```

# 总结
三个方面:
## 编译原理
1. 经过亲自动手实践，加深了我对编译原理尤其是LL(1)文法的理解。
2. 通过死循环，真正的体会理解了消除左递归的重要性
3. 手动见证了语法自动分析的神奇之处。

## 代码
1. 熟练掌握了C++的vector,set,map等数据结构
2. 学习并运用迭代器，充分解耦，提高了编写效率与程序性能
3. 进一步掌握了c++的格式化输出，使输出美观
4. 充分考虑到各种情况，提高了程序的鲁棒性
5. 进行了一定程度的优化，提高了程序的执行效率

## 工程
1. 第一次用vim进行ｃ++开发。第一次接触makefile。在vim的配置上花费了许多时间，但是收货颇丰，获得了许多的通用技能。(前期使用vscode感觉不够硬核于是换的vim)
2. 第一次使用命令框gdb进行调试。 
3. [Github](https://github.com/luyuhao98/LL1)
4. Madoko

~ End MainPanel